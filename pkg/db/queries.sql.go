// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package sqlc

import (
	"context"
)

const deleteTodoById = `-- name: DeleteTodoById :exec
delete from Todos
where id = $1 and user_id = $2
`

type DeleteTodoByIdParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"userId"`
}

func (q *Queries) DeleteTodoById(ctx context.Context, arg DeleteTodoByIdParams) error {
	_, err := q.db.Exec(ctx, deleteTodoById, arg.ID, arg.UserID)
	return err
}

const getUserData = `-- name: GetUserData :one
select id, username, passwd, salt from Users
where username = $1
`

func (q *Queries) GetUserData(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserData, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Passwd,
		&i.Salt,
	)
	return i, err
}

const getUserTodos = `-- name: GetUserTodos :many
select id, content, done
from Todos
where user_id = $1
order by id desc
`

type GetUserTodosRow struct {
	ID      int32  `json:"id"`
	Content string `json:"content"`
	Done    bool   `json:"done"`
}

func (q *Queries) GetUserTodos(ctx context.Context, userID int32) ([]GetUserTodosRow, error) {
	rows, err := q.db.Query(ctx, getUserTodos, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserTodosRow
	for rows.Next() {
		var i GetUserTodosRow
		if err := rows.Scan(&i.ID, &i.Content, &i.Done); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newTodo = `-- name: NewTodo :one
insert into Todos(content, user_id)
values($1, $2)
returning id, content, done, user_id
`

type NewTodoParams struct {
	Content string `json:"content"`
	UserID  int32  `json:"userId"`
}

func (q *Queries) NewTodo(ctx context.Context, arg NewTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, newTodo, arg.Content, arg.UserID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Done,
		&i.UserID,
	)
	return i, err
}

const newUser = `-- name: NewUser :exec
insert into Users(username, passwd, salt)
values($1, $2, $3)
`

type NewUserParams struct {
	Username string `json:"username"`
	Passwd   []byte `json:"passwd"`
	Salt     string `json:"salt"`
}

func (q *Queries) NewUser(ctx context.Context, arg NewUserParams) error {
	_, err := q.db.Exec(ctx, newUser, arg.Username, arg.Passwd, arg.Salt)
	return err
}

const toggleUserTodo = `-- name: ToggleUserTodo :one
update Todos
set done = not done
where id = $1 and user_id = $2
returning done
`

type ToggleUserTodoParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"userId"`
}

func (q *Queries) ToggleUserTodo(ctx context.Context, arg ToggleUserTodoParams) (bool, error) {
	row := q.db.QueryRow(ctx, toggleUserTodo, arg.ID, arg.UserID)
	var done bool
	err := row.Scan(&done)
	return done, err
}
